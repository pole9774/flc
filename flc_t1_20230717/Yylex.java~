/* The following code was generated by JFlex 1.7.0 */

/**************************
 Scanner
***************************/

import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>scanner.jflex</tt>
 */
class Yylex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\42\1\2\1\4\1\4\1\3\22\0\1\42\1\0\1\31"+
    "\2\0\1\41\4\0\1\21\1\30\1\34\1\22\1\27\1\1\1\13"+
    "\1\14\1\7\1\16\1\25\1\26\1\12\3\10\1\0\1\33\5\0"+
    "\1\17\1\15\4\11\21\20\1\24\1\23\1\20\4\0\1\32\1\0"+
    "\1\17\3\11\1\35\1\11\10\20\1\40\2\20\1\37\2\20\1\36"+
    "\5\20\1\5\1\0\1\6\7\0\1\4\u1fa2\0\1\4\1\4\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\2\1\2\2\1\1\2\3\1\1\2\3\1\1"+
    "\1\4\1\1\1\5\1\6\1\1\1\7\1\2\1\0"+
    "\2\3\1\0\2\3\1\0\1\3\2\0\2\3\4\0"+
    "\2\3\1\0\4\10\1\3\1\0\1\3\1\0\1\11"+
    "\1\12\1\0\1\2\1\3\2\0\1\10\1\0\1\10"+
    "\1\0\1\3\1\13\1\3\7\0\1\3\5\0\1\3"+
    "\17\0\1\14\15\0\1\14\2\0\1\15\1\14\11\0"+
    "\1\15\16\0\1\16\7\0\1\15\1\0\1\15";

  private static int [] zzUnpackAction() {
    int [] result = new int[143];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\43\0\106\0\43\0\151\0\214\0\257\0\322"+
    "\0\365\0\u0118\0\u013b\0\u015e\0\43\0\u0181\0\43\0\43"+
    "\0\u01a4\0\43\0\u01c7\0\u01ea\0\u020d\0\u0230\0\u0253\0\u0276"+
    "\0\u0299\0\u02bc\0\u02df\0\u0302\0\u0325\0\u0348\0\u036b\0\u038e"+
    "\0\u03b1\0\u03d4\0\u03f7\0\u041a\0\u043d\0\u0460\0\u0483\0\u04a6"+
    "\0\u04c9\0\u04ec\0\u050f\0\u0532\0\u0555\0\u0578\0\43\0\43"+
    "\0\u059b\0\u03f7\0\u05be\0\u05e1\0\u0604\0\u0627\0\u064a\0\u05e1"+
    "\0\u066d\0\u0690\0\43\0\u06b3\0\u06d6\0\u06f9\0\u071c\0\u073f"+
    "\0\u0762\0\u0785\0\u07a8\0\u07cb\0\u07ee\0\u0811\0\u0834\0\u0857"+
    "\0\u087a\0\u089d\0\u08c0\0\u08e3\0\u0906\0\u0929\0\u094c\0\u096f"+
    "\0\u0992\0\u09b5\0\u09d8\0\u09fb\0\u0a1e\0\u0a41\0\u0a64\0\u0a87"+
    "\0\u0aaa\0\u0acd\0\u0af0\0\u0b13\0\u0b36\0\u0b59\0\u0b7c\0\u0b9f"+
    "\0\u0bc2\0\u0be5\0\u0c08\0\u0c2b\0\u0c4e\0\u0c71\0\u0c94\0\43"+
    "\0\u0cb7\0\u0cda\0\u0cfd\0\u0be5\0\u0d20\0\u0d43\0\u0d66\0\u0d89"+
    "\0\u0dac\0\u0dcf\0\u0df2\0\u0e15\0\u0e38\0\u0e5b\0\u0e7e\0\u0ea1"+
    "\0\u0ec4\0\u0ee7\0\u0f0a\0\u0f2d\0\u0f50\0\u0f73\0\u0f96\0\u0fb9"+
    "\0\u0fdc\0\u0fff\0\u1022\0\u1045\0\43\0\u1068\0\u108b\0\u10ae"+
    "\0\u10d1\0\u10f4\0\u1117\0\u113a\0\u115d\0\u1180\0\43";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[143];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\0\1\6\1\2\1\7"+
    "\1\10\1\11\1\10\1\12\1\13\1\11\1\10\1\11"+
    "\1\2\1\14\1\15\2\2\2\10\2\2\1\16\1\2"+
    "\1\17\1\20\1\21\3\2\1\22\1\4\44\0\1\23"+
    "\43\0\1\4\45\0\1\24\44\0\1\25\1\26\1\27"+
    "\1\30\2\25\1\27\1\25\1\27\5\0\1\25\1\31"+
    "\1\32\5\0\1\27\14\0\2\33\1\34\3\33\1\34"+
    "\1\33\1\34\5\0\2\33\1\32\5\0\1\34\14\0"+
    "\11\34\5\0\2\34\6\0\1\34\14\0\2\35\1\0"+
    "\3\35\1\0\1\35\6\0\2\35\1\32\22\0\1\36"+
    "\1\25\1\0\1\25\2\37\1\0\1\25\6\0\2\25"+
    "\1\32\34\0\1\40\30\0\12\41\2\0\4\41\3\0"+
    "\1\41\2\0\4\41\11\0\11\34\5\0\2\34\6\0"+
    "\1\34\1\42\4\0\2\23\3\0\36\23\2\24\3\0"+
    "\1\24\1\43\34\24\7\0\2\44\1\0\3\44\1\0"+
    "\1\44\6\0\2\44\1\32\22\0\2\45\1\46\3\45"+
    "\1\46\1\45\1\46\5\0\2\45\1\32\5\0\1\46"+
    "\16\0\1\46\3\0\1\46\1\0\1\46\15\0\1\46"+
    "\14\0\2\45\1\0\3\45\1\0\1\45\6\0\2\45"+
    "\1\32\22\0\1\44\1\45\1\0\1\45\2\44\1\0"+
    "\1\44\6\0\2\44\1\32\22\0\1\47\1\50\1\0"+
    "\1\50\1\51\1\52\1\0\1\50\6\0\2\50\23\0"+
    "\2\53\1\46\3\53\1\46\1\53\1\46\5\0\2\53"+
    "\1\32\5\0\1\46\14\0\11\46\5\0\2\46\6\0"+
    "\1\46\14\0\2\54\1\0\3\54\1\0\1\54\6\0"+
    "\2\54\23\0\2\55\1\0\3\55\1\56\1\55\1\34"+
    "\5\0\2\55\1\32\22\0\2\55\1\34\3\55\1\34"+
    "\1\55\1\34\5\0\2\55\1\32\5\0\1\34\26\0"+
    "\1\57\30\0\12\41\2\0\4\41\2\0\1\60\1\41"+
    "\2\0\4\41\41\0\1\61\3\0\2\24\3\0\1\24"+
    "\1\62\34\24\7\0\2\63\1\0\3\63\1\0\1\63"+
    "\6\0\2\63\1\32\22\0\2\63\1\0\3\63\1\0"+
    "\1\63\6\0\2\63\1\64\34\0\1\65\30\0\1\50"+
    "\1\51\1\0\1\51\2\50\1\0\1\50\6\0\1\50"+
    "\1\66\1\67\22\0\2\51\1\0\3\51\1\0\1\51"+
    "\6\0\2\51\1\67\22\0\2\70\1\0\3\70\1\0"+
    "\1\70\6\0\2\70\1\67\22\0\2\50\1\0\3\50"+
    "\1\0\1\50\6\0\2\50\1\67\22\0\2\63\1\0"+
    "\3\63\1\0\1\63\2\0\1\65\3\0\2\63\1\64"+
    "\22\0\2\71\1\0\3\71\1\0\1\71\6\0\2\71"+
    "\23\0\2\72\1\46\3\72\1\46\1\72\1\46\5\0"+
    "\2\72\1\32\5\0\1\46\14\0\1\46\3\0\2\46"+
    "\1\0\1\46\64\0\1\73\11\0\2\74\1\0\3\74"+
    "\1\0\1\74\3\0\1\75\2\0\2\74\1\64\1\75"+
    "\21\0\2\70\1\0\3\70\1\0\1\70\6\0\2\70"+
    "\25\0\1\76\3\0\1\76\1\0\2\76\2\0\2\76"+
    "\10\0\4\76\11\0\1\51\1\70\1\0\1\70\2\51"+
    "\1\0\1\51\6\0\2\51\1\67\22\0\1\77\1\100"+
    "\1\0\1\100\1\101\1\102\1\0\1\100\6\0\2\100"+
    "\23\0\2\103\1\0\3\103\1\0\1\103\3\0\1\75"+
    "\2\0\2\103\1\0\1\75\21\0\2\74\1\0\3\74"+
    "\1\0\1\74\2\0\1\65\1\75\2\0\2\74\1\64"+
    "\1\75\21\0\2\104\1\0\3\104\1\0\1\104\6\0"+
    "\2\104\1\64\22\0\2\105\1\0\3\105\1\0\1\105"+
    "\6\0\2\105\25\0\1\106\3\0\1\106\1\0\2\106"+
    "\2\0\2\106\10\0\4\106\11\0\1\100\1\101\1\0"+
    "\1\101\2\100\1\0\1\100\6\0\1\100\1\107\1\110"+
    "\22\0\2\101\1\0\3\101\1\0\1\101\6\0\2\101"+
    "\1\110\42\0\1\110\22\0\2\100\1\0\3\100\1\0"+
    "\1\100\6\0\2\100\1\110\22\0\2\111\1\0\3\111"+
    "\1\0\1\111\6\0\2\111\23\0\2\112\1\0\3\112"+
    "\1\0\1\112\3\0\1\75\2\0\2\112\1\64\1\75"+
    "\21\0\2\113\1\0\3\113\1\0\1\113\6\0\2\113"+
    "\25\0\1\114\3\0\1\114\1\0\2\114\2\0\2\114"+
    "\10\0\4\114\11\0\1\101\3\0\2\101\1\0\1\101"+
    "\6\0\2\101\1\110\22\0\1\115\1\116\1\0\1\116"+
    "\1\117\1\120\1\0\1\116\6\0\2\116\36\0\1\75"+
    "\5\0\1\75\21\0\2\112\1\0\3\112\1\0\1\112"+
    "\6\0\2\112\1\64\22\0\2\121\1\0\3\121\1\0"+
    "\1\121\6\0\2\121\25\0\1\122\3\0\1\122\1\0"+
    "\2\122\2\0\2\122\10\0\4\122\11\0\1\116\1\117"+
    "\1\0\1\117\2\116\1\0\1\116\3\0\1\123\2\0"+
    "\1\116\1\124\23\0\2\117\1\0\3\117\1\0\1\117"+
    "\3\0\1\123\2\0\2\117\36\0\1\123\27\0\2\116"+
    "\1\0\3\116\1\0\1\116\3\0\1\123\2\0\2\116"+
    "\23\0\2\125\1\0\3\125\1\0\1\125\6\0\2\125"+
    "\25\0\1\126\3\0\1\126\1\0\2\126\2\0\2\126"+
    "\10\0\4\126\11\0\1\127\42\0\1\117\3\0\2\117"+
    "\1\0\1\117\3\0\1\123\2\0\2\117\23\0\2\130"+
    "\1\0\3\130\1\0\1\130\3\0\1\131\2\0\2\130"+
    "\1\0\1\131\23\0\1\122\3\0\1\122\1\0\2\122"+
    "\1\0\1\132\2\122\10\0\4\122\15\0\1\133\36\0"+
    "\2\134\1\0\3\134\1\0\1\134\6\0\2\134\23\0"+
    "\2\135\1\0\3\135\1\0\1\135\6\0\2\135\35\0"+
    "\1\136\1\0\1\137\26\0\1\140\55\0\1\131\5\0"+
    "\1\131\21\0\2\141\1\0\3\141\1\0\1\141\6\0"+
    "\2\141\35\0\1\142\45\0\1\143\34\0\1\144\6\0"+
    "\1\145\24\0\2\146\1\0\3\146\1\0\1\146\6\0"+
    "\2\146\35\0\1\147\44\0\1\150\1\137\17\0\1\151"+
    "\42\0\1\152\50\0\2\153\1\0\3\153\1\0\1\153"+
    "\6\0\2\153\35\0\1\154\35\0\1\155\41\0\1\156"+
    "\36\0\2\157\1\0\3\157\1\0\1\157\3\0\1\160"+
    "\2\0\2\157\1\0\1\160\21\0\1\161\3\0\1\162"+
    "\1\163\35\0\1\164\4\0\1\161\1\0\1\165\33\0"+
    "\2\166\1\0\3\166\1\0\1\166\6\0\2\166\23\0"+
    "\2\167\1\0\3\167\1\0\1\167\6\0\2\167\15\0"+
    "\1\170\42\0\1\171\42\0\1\172\42\0\1\173\42\0"+
    "\1\174\63\0\1\160\5\0\1\160\21\0\2\175\1\0"+
    "\3\175\1\0\1\175\6\0\2\175\23\0\1\176\3\0"+
    "\1\177\1\176\1\0\1\200\33\0\1\176\3\0\1\201"+
    "\1\176\1\0\1\200\33\0\1\176\3\0\1\177\1\176"+
    "\1\0\1\202\33\0\1\176\3\0\1\177\1\176\41\0"+
    "\1\203\36\0\2\204\1\0\3\204\1\0\1\204\6\0"+
    "\2\204\23\0\2\205\1\0\3\205\1\0\1\205\6\0"+
    "\2\205\23\0\2\205\1\0\1\205\1\0\1\205\1\0"+
    "\1\205\6\0\2\205\27\0\2\205\36\0\1\205\1\0"+
    "\1\205\13\0\1\205\27\0\1\205\36\0\1\205\4\0"+
    "\1\205\1\0\1\205\33\0\2\206\1\0\3\206\1\0"+
    "\1\206\6\0\2\206\23\0\2\207\1\0\3\207\1\0"+
    "\1\207\3\0\1\210\2\0\2\207\1\0\1\210\21\0"+
    "\2\211\1\0\3\211\1\0\1\211\6\0\2\211\23\0"+
    "\2\212\1\0\3\212\1\0\1\212\6\0\2\212\36\0"+
    "\1\210\5\0\1\210\21\0\2\213\1\0\3\213\1\0"+
    "\1\213\6\0\2\213\23\0\2\214\1\0\3\214\1\0"+
    "\1\214\6\0\2\214\23\0\2\215\1\0\3\215\1\0"+
    "\1\215\6\0\2\215\23\0\2\216\1\0\3\216\1\0"+
    "\1\216\6\0\2\216\23\0\2\217\1\0\3\217\1\0"+
    "\1\217\6\0\2\217\14\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4515];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\10\1\1\11\1\1\2\11"+
    "\1\1\1\11\1\1\1\0\2\1\1\0\2\1\1\0"+
    "\1\1\2\0\2\1\4\0\2\1\1\0\5\1\1\0"+
    "\1\1\1\0\2\11\1\0\2\1\2\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\11\1\1\7\0\1\1\5\0"+
    "\1\1\17\0\1\1\15\0\1\11\2\0\2\1\11\0"+
    "\1\1\16\0\1\11\7\0\1\1\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[143];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	private Symbol sym(int type) {
		return new Symbol(type, yyline, yycolumn);
	}
	
	private Symbol sym(int type, Object value) {
		return new Symbol(type, yyline, yycolumn, value);
	}
	


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 152) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("Scanner Error: " + yytext());
            } 
            // fall through
          case 15: break;
          case 2: 
            { ;
            } 
            // fall through
          case 16: break;
          case 3: 
            { return new Symbol(sym.UINT, yyline, yycolumn, new Integer(yytext()));
            } 
            // fall through
          case 17: break;
          case 4: 
            { return new Symbol(sym.MINUS, yyline, yycolumn);
            } 
            // fall through
          case 18: break;
          case 5: 
            { return new Symbol(sym.S, yyline, yycolumn);
            } 
            // fall through
          case 19: break;
          case 6: 
            { return new Symbol(sym.CM, yyline, yycolumn);
            } 
            // fall through
          case 20: break;
          case 7: 
            { return new Symbol(sym.PERC, yyline, yycolumn);
            } 
            // fall through
          case 21: break;
          case 8: 
            { return new Symbol(sym.DOUBLE, yyline, yycolumn, new Double(yytext()));
            } 
            // fall through
          case 22: break;
          case 9: 
            { return new Symbol(sym.SEP, yyline, yycolumn);
            } 
            // fall through
          case 23: break;
          case 10: 
            { return new Symbol(sym.QSTRING, yyline, yycolumn, new String(yytext()));
            } 
            // fall through
          case 24: break;
          case 11: 
            { return new Symbol(sym.EURO, yyline, yycolumn);
            } 
            // fall through
          case 25: break;
          case 12: 
            { return new Symbol(sym.TOKEN1, yyline, yycolumn);
            } 
            // fall through
          case 26: break;
          case 13: 
            { return new Symbol(sym.TOKEN3, yyline, yycolumn);
            } 
            // fall through
          case 27: break;
          case 14: 
            { return new Symbol(sym.TOKEN2, yyline, yycolumn);
            } 
            // fall through
          case 28: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
