import java_cup.runtime.*;
import java.util.*;
import java.io.*;

init with {:
	symbol_table = new HashMap();
    System.out.println("Achieved scores:");
:};

parser code {:
    public static HashMap symbol_table;
    
    public void report_error(String message, Object info) {
        StringBuffer m = new StringBuffer(message);
        if (info instanceof Symbol) {
            if (((Symbol)info).left != 1 && ((Symbol)info).right != 1) {
                if (((Symbol)info).left != -1 && ((Symbol)info).right != -1) {
                    int line = (((Symbol)info).left) + 1;
                    int column = (((Symbol)info).right) + 1;
                    m.append(" (line " + line + " column " + column + ")");
                }
            }
            System.err.println(m);
        }
    }
    
    public Object stack(int position) {
        return (((Symbol)stack.elementAt(tos + position)).value);
    }
:};

action code {:
    class Attrib {
        private String name;
        private Integer weight;
        
        Attrib(String name, Integer weight){
            this.name = name;
            this.weight = weight;
        }
	
        String getName(){
            return this.name;
        }

        Integer getWeight(){
            return this.weight;
        }
    };
:};


terminal RO, RC, C, ARR, CM, DOT, STAR, PLUS, DIV, MIN, S, EQ;
terminal Integer UINT;
terminal String ID, WORD;

non terminal prog, sentence, desc, desc_list, def, def_list;
non terminal Integer score, score_list;
non terminal String NT0, ident, sentence_elem;
non terminal Attrib attr;
non terminal HashMap attr_list;


start with prog;

prog ::= def_list DOT desc_list;


def_list ::= def def_list | def;

def ::= RO attr_list:h RC ARR ident:a {:
        parser.symbol_table.put(a, h);
    :};

attr_list ::= attr_list:h CM attr:a {:
        h.put(a.getName(), a.getWeight());
        RESULT = h;
    :}
    | attr:a {:
        HashMap h = new HashMap();
        h.put(a.getName(), a.getWeight());
        RESULT = h;
    :};

attr ::= ident:a C UINT:b {:
        RESULT = new Attrib(a, b);
    :};


desc_list ::= desc_list desc 
    | desc;

desc ::= ident C score_list:x EQ sentence S {:
        System.out.println(", " + x);
    :};

score_list ::= score_list:a NT0 CM score:b {:
        RESULT = a + b;
    :}
    | score:x {:
        RESULT = x;
    :};

NT0 ::= {: RESULT = (String)parser.stack(-2); :};

score ::= STAR ident:x {:
        String type_name = (String)parser.stack(-3);
        HashMap h = (HashMap)parser.symbol_table.get(type_name);
        Integer w = (Integer)h.get(x);
        RESULT = 3 * w;
    :}
    | PLUS ident:x {:
        String type_name = (String)parser.stack(-3);
        HashMap h = (HashMap)parser.symbol_table.get(type_name);
        Integer w = (Integer)h.get(x);
        RESULT = 2 * w;
    :}
    | DIV ident:x {:
        String type_name = (String)parser.stack(-3);
        HashMap h = (HashMap)parser.symbol_table.get(type_name);
        Integer w = (Integer)h.get(x);
        RESULT = 1 * w;
    :}
    | MIN ident:x {:
        String type_name = (String)parser.stack(-3);
        HashMap h = (HashMap)parser.symbol_table.get(type_name);
        Integer w = (Integer)h.get(x);
        RESULT = 0 * w;
    :};

sentence ::= sentence sentence_elem:x {:
        System.out.print(" " + x);
    :}
    | sentence_elem:x{:
        System.out.print(x);
    :};

sentence_elem ::= WORD:x {:
        RESULT = x;
    :}
    | UINT:x {:
        RESULT = x.toString();
    :};

ident ::= ID:x {:
        RESULT = x;
    :}
    | WORD:x {:
        RESULT = x;
    :};
